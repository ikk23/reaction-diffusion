// 1D simulation with periodic boundaries, sexual reproduction, non-overlapping generations, male reproductive success based on fitness, and female fecundity based on fitness and local density
initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="x", periodicity="x");
	initializeSex("A");
	
	// Parameters that can be changed at the command line
	defineCfgParam("a", 0.0005);
	defineCfgParam("sigma",0.01);
	defineCfgParam("k", 0.2);
	defineCfgParam("u_hat", 0.4);
	// save the boundaries for the drive release
	defineConstant("drive_x_min", 0.5 - (a/2));
	defineConstant("drive_x_max", 0.5 + (a/2));
	
	defineConstant("DRIVE_RELEASE_GENERATION",10); // when to release the drive
	defineConstant("NO_DRIVE", F); // don't release drive at all -- for wt N testing
	
	defineConstant("alpha", 1 - 2*u_hat);
	defineConstant("beta", a/sigma);
	catn("-----------------------------------");
	catn("a = " + a + " sigma = " + sigma + " so beta = " + beta);
	defineConstant("m", sigma); // mating radius
	
	catn("-----------------------------------");
	print(paste("Frequency threshold of:", u_hat, " and alpha of: " + alpha));
	
	defineConstant("POPSIZE", 30000);
	defineConstant("CHROM_LENGTH", 1);
	defineConstant("GROWTH_AT_ZERO_DENSITY", 2); // in empty areas, the expected # of offspring is 2*fitness*this value 
	defineConstant("EXPONENT_OF_COMPETITION_FACTOR", 2); // increase from 1 to make the penalty for crowded individuals more severe
	defineConstant("EXPECTED_ADULT_COMPETITION", POPSIZE*(2*m));
	
	catn("-----------------------------------");
	catn("EXPECTED_ADULT_COMPETITION when m is " + m + " = " + EXPECTED_ADULT_COMPETITION);
	
	// checks
	defineConstant("RELEASE_DRIVE_EVERYWHERE", F); // if F, only release between -a/2 and a/2
	defineConstant("b", 0.18); // if releasing the drive uniformly, make b < 1. Drive released at this introduction frequency everywhere
	
	defineConstant("MATING_DEACTIVATION", F);
	
	// Fitness values are based on alpha (1 - 2u_hat) and k
	d_d_fitness = 	1 + (2*alpha*k);
	d_wt_fitness = 1 + ((alpha-1)*k);
	wt_wt_fitness = 1;
	fitnesses = c(d_d_fitness, d_wt_fitness, wt_wt_fitness);
	// don't need to normalize
	//if (any(fitnesses > 1)) {
	//	fitnesses = fitnesses/max(fitnesses);
	//}
	defineConstant("drive_homozygote_fitness", fitnesses[0]);
	defineConstant("drive_heterozygote_fitness", fitnesses[1]);
	defineConstant("wt_homozygote_fitness", fitnesses[2]);
	print(paste("d/d fitness:",drive_homozygote_fitness, "d/wt fitness:", drive_heterozygote_fitness, "wt/wt fitness:", wt_homozygote_fitness));
	
	catn("-----------------------------------");
	
	// Define a chromosome of length 1. The mutation can either be drive or wt.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	variations = c(wt, dr);
	
	// NEW - these mutations overwrite one another.
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	initializeGenomicElementType("g1", variations, c(1, 1));
	initializeGenomicElement(g1, 0, CHROM_LENGTH-1);
	
	// Define an interaction for mating and local competition
	initializeInteractionType(1, "x", reciprocal=T, maxDistance=m); // i1

}

//// HELPER FUNC FOR CONSTANTS THAT MAY ASLO BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
	if (!exists(name))
		defineConstant(name, value);
}


1 {
	sim.addSubpop("p1", POPSIZE);
	
	all = p1.individuals;
	all.x = runif(POPSIZE, min = 0, max = 1);
	
	all.genomes.addNewDrawnMutation(m1, seqLen(CHROM_LENGTH));
	all.tagF = wt_homozygote_fitness;

}

reproduction(NULL, "F") {
	
	all_neighbors = i1.nearestNeighbors(individual, subpop.individualCount);
	neighbors = all_neighbors[all_neighbors.sex == "M"]; // male neighbors
	num_neighbors = length(neighbors);
	
	// females in empty areas cannot mate
	if (num_neighbors == 0){
		catn("empty area - can't mate"); // should be rare
		return;
	}
	
	// get the fitness values of each male in this circle and sample based on these mating weights
	// determine the female's fecundity based on her fitness and the number of individuals surrounding her
	mating_weights = neighbors.tagF;
	mate_id = sample(x = seqLen(num_neighbors), size = 1, weights = mating_weights);
	selected_mate = neighbors[mate_id];
	female_fitness = individual.tagF;
	
	adult_density_force = i1.totalOfNeighborStrengths(individual);
	competition_ratio = adult_density_force / EXPECTED_ADULT_COMPETITION;
	actual_competition_factor = GROWTH_AT_ZERO_DENSITY/ ((GROWTH_AT_ZERO_DENSITY-1) * competition_ratio + 1);
	actual_competition_factor_exponentiated = actual_competition_factor^EXPONENT_OF_COMPETITION_FACTOR;
	
	p = female_fitness * actual_competition_factor_exponentiated;
	expected_value = 2*p;
	num_offspring = rpois(1,expected_value);
	for (i in seqLen(num_offspring)) {
		offspring = subpop.addCrossed(individual, selected_mate);
	}

}

1: modifyChild() {
	
	// at the drive release generation, convert all offspring whose parents were within the release square to d/d
	gen = sim.generation;
	if (gen == DRIVE_RELEASE_GENERATION){
		if (parent1.x >= drive_x_min & parent1.x <= drive_x_max){
			child.genomes.addNewDrawnMutation(m2, seqLen(CHROM_LENGTH));
		}
	}
	
	wildtype = child.countOfMutationsOfType(m1) == 2*CHROM_LENGTH;
	drive_hom = child.countOfMutationsOfType(m2) == 2*CHROM_LENGTH;
	drive_het = (child.countOfMutationsOfType(m1) == CHROM_LENGTH) & (child.countOfMutationsOfType(m2) == CHROM_LENGTH);
	
	
	// genotype determines fitness and color
	if (wildtype){
		child.tagF = wt_homozygote_fitness;
	} else if (drive_hom) {
		child.tagF = drive_homozygote_fitness;
	} else if (drive_het) {
		child.tagF = drive_heterozygote_fitness;
	} else {
		// shouldn't ever occur
		print("Unknown genotype -- there are " + child.countOfMutationsOfType(m1) + " wt mutations and " + child.countOfMutationsOfType(m2) + " drives");
	}
	
	// draw a displacement distance from the exponential distribution with an average dispersal distance of sigma
	distance = rexp(1,mu = sigma);
	
	// if this draw is 1, go right. If it's 0, go left.
	right = rbinom(1, 1, 0.5);
	if (right){
		position = parent1.x + distance;
	} else {
		position = parent1.x - distance;
	}
	child.setSpatialPosition(p1.pointPeriodic(position));
	
	return T;
}


// Kill off adults
// why was this in a late() event in our gene drive models?
// check this
early() {
	all = p1.individuals;
	all[all.age > 0].fitnessScaling = 0.0;
}


// non-WF specific
// output the generation, population size, and frequency of the drive allele
// evaluate spatial distances for the next round of reproduction
// end the simulation if the drive is lost or fixed
late() {
	
	gen = sim.generation;
	
	if (!NO_DRIVE & gen >= DRIVE_RELEASE_GENERATION){
		N = p1.individualCount;
		all = p1.individuals;
		num_drive_alleles = sum(all.genomes.countOfMutationsOfType(m2)==CHROM_LENGTH);
		rate_dr = num_drive_alleles/(2*N);
		
		
		
		// Separate inds by genotype
		drive_homozygotes = all[all.countOfMutationsOfType(m2) == 2*CHROM_LENGTH];
		drive_heterozygotes = all[all.countOfMutationsOfType(m2)==CHROM_LENGTH];
		wild_types = all[all.countOfMutationsOfType(m1)==2*CHROM_LENGTH];
		homoz_freq = length(drive_homozygotes)/N; // freq(DD)
		het_freq = length(drive_heterozygotes)/N; // freq(Dd)
		
		// count the number of drive alleles
		num_dr = sum(all.genomes.countOfMutationsOfType(m2)==CHROM_LENGTH);
		n_d_wt = length(drive_heterozygotes);
		n_d_d = length(drive_homozygotes);
		
		// Color
		all.color = "blue";
		drive_homozygotes.color = "red";
		drive_heterozygotes.color = "orange";
		
		
		catn("GEN:: " + gen + " N: " + N + " rate_dr: " + rate_dr + " num_drive: " + num_dr + " num_d_d: " + n_d_d + " num_d_wt: " + n_d_wt);
		
		//catn("Generation: " + gen + " N: " + N + " rate_dr: " + rate_dr);
		
		
		if (rate_dr == 0){
			sim.simulationFinished();
		} // else if (rate_dr == 1){
		//sim.simulationFinished();
		//}
	
	} else {
		N = p1.individualCount;
		gen = sim.generation;
		p1.individuals.color = "blue";
		catn("Generation: " + gen + " N: " + N);
	}
	
	i1.evaluate();
}


//Stop the simulation after 100 generations
11 late() { sim.simulationFinished(); }
