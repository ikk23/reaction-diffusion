// 1D simulation with periodic boundaries, sexual reproduction, non-overlapping generations, male reproductive success based on fitness, and female fecundity based on fitness and local density
initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="x", periodicity="x");
	initializeSex("A");
	
	defineConstant("a", 0.105); // width of initial release area (in the middle of the grid)
	defineConstant("sigma",0.05); // average dispersal distance	
	defineConstant("beta", a/sigma);
	defineConstant("m", 0.005); // mating radius
	defineConstant("X_MAX", 1); // x ranges from 0 to X_MAX, default 1.0
	defineConstant("k", 0.2);
	defineConstant("u_hat", 0.2);
	defineConstant("alpha", 1 - 2*u_hat);
	catn("-----------------------------------");
	print(paste("Frequency threshold of:", u_hat, " and alpha of: " + alpha));
	
	defineConstant("POPSIZE", 10000);
	defineConstant("CHROM_LENGTH", 1);
	defineConstant("GROWTH_AT_ZERO_DENSITY", 2); // in empty areas, the expected # of offspring is 2*fitness*this value 
	defineConstant("EXPONENT_OF_COMPETITION_FACTOR", 2); // increase from 1 to make the penalty for crowded individuals more severe
	defineConstant("EXPECTED_ADULT_COMPETITION", POPSIZE*((2*m)/X_MAX)); // if X_MAX=1, this is POPSIZE*2*m
	
	catn("-----------------------------------");
	catn("EXPECTED_ADULT_COMPETITION when m is " + m + " = " + EXPECTED_ADULT_COMPETITION);
	
	// checks
	defineConstant("CHECK_MATING_CODE", F); // whether to check the competition factor code
	defineConstant("RELEASE_DRIVE_EVERYWHERE", T); // if F, only release between -a/2 and a/2
	defineConstant("b", 0.18); // if releasing the drive uniformly, make b < 1. Drive released at this introduction frequency everywhere
	
	// Fitness values are based on alpha (1 - 2u_hat) and k
	d_d_fitness = 	1 + (2*alpha*k);
	d_wt_fitness = 1 + ((alpha-1)*k);
	wt_wt_fitness = 1;
	fitnesses = c(d_d_fitness, d_wt_fitness, wt_wt_fitness);
	// don't need to normalize
	//if (any(fitnesses > 1)) {
	//	fitnesses = fitnesses/max(fitnesses);
	//}
	defineConstant("drive_homozygote_fitness", fitnesses[0]);
	defineConstant("drive_heterozygote_fitness", fitnesses[1]);
	defineConstant("wt_homozygote_fitness", fitnesses[2]);
	print(paste("d/d fitness:",drive_homozygote_fitness, "d/wt fitness:", drive_heterozygote_fitness, "wt/wt fitness:", wt_homozygote_fitness));
	
	catn("-----------------------------------");
	
	// Define a chromosome of length 1. The mutation can either be drive or wt.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	variations = c(wt, dr);
	initializeGenomicElementType("g1", variations, c(1, 1));
	initializeGenomicElement(g1, 0, CHROM_LENGTH-1);
	
	// Define an interaction for mating and local competition
	initializeInteractionType(1, "x", reciprocal=T, maxDistance=m); // i1

}

1 {
	sim.addSubpop("p1", POPSIZE);
	
	all = p1.individuals;
	all.x = runif(POPSIZE, min = 0, max = X_MAX);
	
	// Release drive in the middle of the grid between -a/2 and a/2
	if (!RELEASE_DRIVE_EVERYWHERE){
		
		midpoint = X_MAX/2;
		range_left = midpoint - (a/2);
		range_right = midpoint + (a/2);
		
		in_range = (all.x >= range_left & all.x <= range_right);
		drive = all[in_range];
		wildtype = all[!in_range];
		
		wildtype.genomes.addNewDrawnMutation(m1, seqLen(CHROM_LENGTH));
		drive.genomes.addNewDrawnMutation(m2, seqLen(CHROM_LENGTH));
		
		wildtype.color = "blue";
		drive.color = "red";
		
		// tag individuals based on their fitness
		wildtype.tagF = wt_homozygote_fitness;
		drive.tagF = drive_homozygote_fitness;
	
	} else {
		// (2*number of homozygous drive carriers)/(2*POPSIZE) = initial frequency of the drive = b
		// 2(POPSIZE)b = 2*number of homozygous drive carriers
		// number of homozygous drive carriers = (POPSIZE)*b
		
		// release drive homozygous such that they represent proportion b of the population everywhere
		num_initial_homozygous_drive_carriers  = asInteger(round(POPSIZE*b));
		num_initial_wt = POPSIZE - num_initial_homozygous_drive_carriers;
		
		// sample num_initial_homozygous_drive_carriers random ids to convert to drive
		drive_ids = sample(x = seqLen(POPSIZE), size = num_initial_homozygous_drive_carriers, replace = F);
		
		for (i in seqLen(POPSIZE)){
			ind = all[i];
			if (any(drive_ids == ind.index)){
				ind.genomes.addNewDrawnMutation(m2, seqLen(CHROM_LENGTH));
				ind.color = "red";
				ind.tagF = drive_homozygote_fitness;
			} else {
				ind.genomes.addNewDrawnMutation(m1, seqLen(CHROM_LENGTH));
				ind.color = "blue";
				ind.tagF = wt_homozygote_fitness;
			}
		}
	}


}

reproduction(NULL, "F") {
	
	all_neighbors = i1.nearestNeighbors(individual, subpop.individualCount);
	neighbors = all_neighbors[all_neighbors.sex == "M"]; // male neighbors
	num_neighbors = length(neighbors);
	
	// females in empty areas cannot mate
	if (num_neighbors == 0){
		catn("empty area - can't mate"); // should be rare
		return;
	}
	
	// get the fitness values of each male in this circle and sample based on these mating weights
	
	if (sim.generation > 2){
		mating_weights = neighbors.tagF;
		mate_id = sample(x = seqLen(num_neighbors), size = 1, weights = mating_weights);
		selected_mate = neighbors[mate_id];
	} else {
		selected_mate = sample(neighbors,1);
	}
	
	// determine the female's fecundity based on her fitness and the number of individuals surrounding her
	
	if (sim.generation > 2){
		female_fitness = individual.tagF;
	} else {
		female_fitness = 1;
	}
	adult_density_force = i1.totalOfNeighborStrengths(individual);
	competition_ratio = adult_density_force / EXPECTED_ADULT_COMPETITION;
	actual_competition_factor = GROWTH_AT_ZERO_DENSITY/ ((GROWTH_AT_ZERO_DENSITY-1) * competition_ratio + 1);
	actual_competition_factor_exponentiated = actual_competition_factor^EXPONENT_OF_COMPETITION_FACTOR;
	
	p = female_fitness * actual_competition_factor_exponentiated;
	expected_value = 2*p;
	num_offspring = rpois(1,expected_value);
	for (i in seqLen(num_offspring)) {
		offspring = subpop.addCrossed(individual, selected_mate);
	}
	
	// For a random 10 females, print out the number of individuals surrounding them, the competition factor, p, and their number of offspring
	if (CHECK_MATING_CODE){
		if (any(c(8844,2220,2372,7725,533,9168,7687,38,4562,594) == individual.index)){
			catn("female's normalized fitness is " + female_fitness + " num inds surrounding female = " + adult_density_force + " competition factor = " + actual_competition_factor_exponentiated + " p = " + p + " num offspring = " + num_offspring);
		}
	}

}

1: modifyChild() {
	
	wildtype = child.countOfMutationsOfType(m1) == 2*CHROM_LENGTH;
	drive_hom = child.countOfMutationsOfType(m2) == 2*CHROM_LENGTH;
	drive_het = (child.countOfMutationsOfType(m1) == CHROM_LENGTH) & (child.countOfMutationsOfType(m2) == CHROM_LENGTH);
	
	// genotype determines fitness and color
	if (wildtype){
		child.tagF = wt_homozygote_fitness;
		child.color = "blue";
	} else if (drive_hom) {
		child.tagF = drive_homozygote_fitness;
		child.color = "red";
	} else if (drive_het) {
		child.tagF = drive_heterozygote_fitness;
		child.color = "red";
	} else {
		// shouldn't ever occur
		print("Unknown genotype -- there are ",child.countOfMutationsOfType(m1), " wt mutations and " + child.countOfMutationsOfType(m2) + " drives");
	}
	
	// draw a displacement distance from the exponential distribution with an average dispersal distance of sigma
	distance = rexp(1,mu = sigma);
	
	// if this draw is 1, go right. If it's 0, go left.
	right = rbinom(1, 1, 0.5);
	if (right){
		position = parent1.x + distance;
	} else {
		position = parent1.x - distance;
	}
	child.setSpatialPosition(p1.pointPeriodic(position));
	
	return T;
}


// Kill off adults
// why was this in a late() event in our gene drive models?
early() {
	all = p1.individuals;
	all[all.age > 0].fitnessScaling = 0.0;
}


// non-WF specific
// output the generation, population size, and frequency of the drive allele
// evaluate spatial distances for the next round of reproduction
// end the simulation if the drive is lost or fixed
late() {
	
	N = p1.individualCount;
	all = p1.individuals;
	num_drive_alleles = sum(all.genomes.countOfMutationsOfType(m2)==CHROM_LENGTH);
	rate_dr = num_drive_alleles/(2*N);
	gen = sim.generation;
	
	// Separate drive homozygotes and drive heterozygotes
	drive_homozygotes = all[all.countOfMutationsOfType(m2) == 2*CHROM_LENGTH];
	drive_heterogzygotes = all[all.countOfMutationsOfType(m2)==CHROM_LENGTH];
	homoz_freq = length(drive_homozygotes)/N; // freq(DD)
	het_freq = length(drive_heterogzygotes)/N; // freq(Dd)
	
	catn("Generation: " + gen + " N: " + N + " rate_dr: " + rate_dr + " freq(DD) = "+homoz_freq+" freq(Dd) = "+het_freq);
	
	
	if (rate_dr == 0){
		sim.simulationFinished();
	} // else if (rate_dr == 1){
	//sim.simulationFinished();
	//}
	
	i1.evaluate();
}


//Stop the simulation after 100 generations
100 late() { sim.simulationFinished(); }
