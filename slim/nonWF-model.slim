// 1D simulation with periodic boundaries, sexual reproduction, non-overlapping generations, male reproductive success based on fitness, and female fecundity based on fitness and local density
initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="x", periodicity="x");
	initializeSex("A");
	
	// Parameters that can be changed at the command line
	defineCfgParam("a", 0.02);
	defineCfgParam("sigma",0.01);
	defineCfgParam("k", 0.2);
	defineCfgParam("u_hat", 0.4);
	// save the boundaries for the drive release
	defineConstant("drive_x_min", 0.5 - (a/2));
	defineConstant("drive_x_max", 0.5 + (a/2));
	defineConstant("DRIVE_RELEASE_GENERATION",10); // when to release the drive
	defineConstant("alpha", 1 - 2*u_hat);
	defineConstant("beta", a/sigma);
	catn("-----------------------------------");
	catn("a = " + a + " sigma = " + sigma + " so beta = " + beta);
	defineConstant("m", 0.001); // mating radius
	catn("-----------------------------------");
	print(paste("Frequency threshold of:", u_hat, " and alpha of: " + alpha));
	defineConstant("POPSIZE", 30000);
	defineConstant("CHROM_LENGTH", 1);
	d_d_fitness = 	1 + (2*alpha*k);
	d_wt_fitness = 1 + ((alpha-1)*k);
	wt_wt_fitness = 1;
	fitnesses = c(d_d_fitness, d_wt_fitness, wt_wt_fitness);
	defineConstant("drive_homozygote_fitness", fitnesses[0]);
	defineConstant("drive_heterozygote_fitness", fitnesses[1]);
	defineConstant("wt_homozygote_fitness", fitnesses[2]);
	print(paste("d/d fitness:",drive_homozygote_fitness, "d/wt fitness:", drive_heterozygote_fitness, "wt/wt fitness:", wt_homozygote_fitness));
	catn("-----------------------------------");
	
	defineConstant("GROWTH_AT_ZERO_DENSITY", 2);
	defineConstant("EXPONENT_OF_COMPETITION_FACTOR", 1);
	defineConstant("EXPECTED_ADULT_COMPETITION", POPSIZE*(2*m));
	catn("-----------------------------------");
	catn("EXPECTED_ADULT_COMPETITION when m is " + m + " = " + EXPECTED_ADULT_COMPETITION);
	
	defineConstant("OUTPUT_WINDOW_POINTS", T); // only output the rate of the drive at specific points
	defineConstant("X1", 0.47); // x < -a/2
	defineConstant("X2", 0.5); // -a/2 <= x <= a/2
	defineConstant("X3", 0.54); // x > a/2
	// Plot the number of drive alleles, drive homozygotes, and drive heterozygotes
	// between [0.5-MIDPOINT_WINDOW_WIDTH] and [0.5+MIDPOINT_WINDOW_WIDTH]
	defineConstant("LIVEPLOT", F);
	defineConstant("MIDPOINT_WINDOW_WIDTH", 0.0005);
	defineConstant("window_lower", 0.5 - MIDPOINT_WINDOW_WIDTH);
	defineConstant("window_upper", 0.5 + MIDPOINT_WINDOW_WIDTH);
	if (LIVEPLOT){
		if (fileExists("/usr/bin/Rscript"))
			defineConstant("RSCRIPT", "/usr/bin/Rscript");
		else if (fileExists("/usr/local/bin/Rscript"))
			defineConstant("RSCRIPT", "/usr/local/bin/Rscript");
		else
			stop("Couldn't find Rscript.");
	}
	
	// CHECKS	
	defineConstant("EXPECTED_NUM_OFFSPRING_MULTIPLIER", 2.0); // this*p is used in the Poisson distribution if VIABILITY_SELECTION=True
	defineConstant("PANMICTIC_CHECK", F); // remove all spatial processes
	// don't use if VIABILITY_SELECTION is true
	defineConstant("RELEASE_DRIVE_EVERYWHERE", F); // if F, only release between -a/2 and a/2
	defineConstant("b", 0.45); // intro frequency if RELEASE_DRIVE_EVERYWHERE is true. If not, this is 1 inside the release square.
	
	// Chromosome of length 1. The mutation can either be drive or wt.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	variations = c(wt, dr);
	
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	initializeGenomicElementType("g1", variations, c(1, 1));
	initializeGenomicElement(g1, 0, CHROM_LENGTH-1);
	
	// Interaction for mating and local competition
	initializeInteractionType(1, "x", reciprocal=T, maxDistance=m);

}

//// HELPER FUNC FOR CONSTANTS THAT MAY ASLO BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
	if (!exists(name))
		defineConstant(name, value);
}


1 {
	sim.addSubpop("p1", POPSIZE);
	
	all = p1.individuals;
	all.x = runif(POPSIZE, min = 0, max = 1);
	
	all.genomes.addNewDrawnMutation(m1, seqLen(CHROM_LENGTH));
	all.tagF = wt_homozygote_fitness;
	
	if (LIVEPLOT){
	
		// PATH TO PLOT FOR GENOTYPE COUNTS
		defineConstant("pngPath", writeTempFile("plot_", ".png", ""));
		// If we're running in SLiMgui, open a plot window
		if (exists("slimgui")) slimgui.openDocument(pngPath);		
		
		// PATH TO PLOT FOR OVERALL DRIVE RATE
		defineConstant("pngPathForDriveRate",writeTempFile("plot2_", ".png", ""));
		if (exists("slimgui")) slimgui.openDocument(pngPathForDriveRate);	
		
		// PATH TO PLOT FOR THE DRIVE FREQUENCY WITHIN THE WINDOW
		defineConstant("pngPathForu",writeTempFile("plot3_", ".png", ""));
		if (exists("slimgui")) slimgui.openDocument(pngPathForu);	

		// within window 
		sim.setValue("d", NULL); // count of drive alleles
		sim.setValue("dd", NULL); // count of dd homozygotes
		sim.setValue("dwt",NULL); // count of dwt heterozygotes
		sim.setValue("d_rate_in_window", NULL);
		
		// over entire range
		sim.setValue("drive_rate", NULL); // overall drive rate
		
	}

}

reproduction(NULL, "F") {
	
	
	if (!PANMICTIC_CHECK){
		all_neighbors = i1.nearestNeighbors(individual, subpop.individualCount);
		neighbors = all_neighbors[all_neighbors.sex == "M"]; // male neighbors
		num_neighbors = length(neighbors);
		// females in empty areas cannot mate
		if (num_neighbors == 0){
			catn("empty area - can't mate"); // should be rare
			return;
		}
		// sample any random male from the mating radius
		mate_id = sample(x = seqLen(num_neighbors), size = 1);
		selected_mate = neighbors[mate_id];
	} else {
		// male can be anywhere if this is panmictic
		all = p1.individuals;
		males = all[all.sex=="M"];
		mate_id = sample(x = seqLen(length(males)), size = 1);
		selected_mate = males[mate_id];
	}
	
	// the expected number of offspring depends on the number of individuals surrounding the female
	if (!PANMICTIC_CHECK){
		adult_density_force = i1.totalOfNeighborStrengths(individual);
		competition_ratio = adult_density_force / EXPECTED_ADULT_COMPETITION;
		actual_competition_factor = GROWTH_AT_ZERO_DENSITY/ ((GROWTH_AT_ZERO_DENSITY-1) * competition_ratio + 1);
		actual_competition_factor_exponentiated = actual_competition_factor^EXPONENT_OF_COMPETITION_FACTOR;
		p = actual_competition_factor_exponentiated; // fitness doesn't affect fecundity, but the # offspring is
		expected_value = p*EXPECTED_NUM_OFFSPRING_MULTIPLIER;
	} else {
		expected_value = 2;
	}
	
	num_offspring = rpois(1,expected_value);
	
	for (i in seqLen(num_offspring)) {
		offspring = subpop.addCrossed(individual, selected_mate);
	}

}

1: modifyChild() {
	
	// tag the child with their fitness value
	gen = sim.generation;
	wildtype = child.countOfMutationsOfType(m1) == 2*CHROM_LENGTH;
	drive_hom = child.countOfMutationsOfType(m2) == 2*CHROM_LENGTH;
	drive_het = (child.countOfMutationsOfType(m1) == CHROM_LENGTH) & (child.countOfMutationsOfType(m2) == CHROM_LENGTH);	
	if (wildtype){
		child.tagF = wt_homozygote_fitness;
	} else if (drive_hom) {
		child.tagF = drive_homozygote_fitness;
	} else if (drive_het) {
		child.tagF = drive_heterozygote_fitness;
	} else {
		print("Unknown genotype -- there are " + child.countOfMutationsOfType(m1) + " wt mutations and " + child.countOfMutationsOfType(m2) + " drives"); // check - should never happen
	}
	
	position = parent1.x; // no displacement here
	
	child.setSpatialPosition(p1.pointPeriodic(position));
	
	return T;
}


// Kill off adults and let juvenile survival depend on their genotype fitness value relative to d/d
early() {
	
	all = p1.individuals;
	all[all.age > 0].fitnessScaling = 0.0;
	
	juveniles = all[all.age==0];
		
		// probability of juvenial survival is now dependent on relative fitness value
	juveniles.fitnessScaling = juveniles.tagF/drive_homozygote_fitness; 
}


// non-WF specific
// output the generation, population size, and frequency of the drive allele
// evaluate spatial distances for the next round of reproduction
// end the simulation if the drive is lost or fixed
late() {
	
	gen = sim.generation;
	all = p1.individuals;
	
	// before drive release, just handle color.
	if (gen < DRIVE_RELEASE_GENERATION){
		N = p1.individualCount;
		all.color = "blue"; // only wild-types
		//catn("GEN = " + gen + " N = " + N);
	}	
	
	// convert all individuals within the [0.5 - a/2, 0.5 + a/2] square to drive homozygotes
	if (gen == DRIVE_RELEASE_GENERATION){
		all_in_range = all[all.x >= drive_x_min & all.x <= drive_x_max];
		all_in_range.genomes.addNewDrawnMutation(m2, seqLen(CHROM_LENGTH));
	}
	
	// Output
	if (gen >= DRIVE_RELEASE_GENERATION & !OUTPUT_WINDOW_POINTS){
		N = p1.individualCount;
		num_drive_alleles = sum(all.genomes.countOfMutationsOfType(m2)==CHROM_LENGTH);
		rate_dr = num_drive_alleles/(2*N); // overall rate of the drive
		
		// Separate inds by genotype across the entire range
		drive_homozygotes = all[all.countOfMutationsOfType(m2) == 2*CHROM_LENGTH];
		drive_heterozygotes = all[all.countOfMutationsOfType(m2)==CHROM_LENGTH];
		wild_types = all[all.countOfMutationsOfType(m1)==2*CHROM_LENGTH];
		homoz_freq = length(drive_homozygotes)/N; // freq(DD)
		het_freq = length(drive_heterozygotes)/N; // freq(Dd)
	
		// Color
		all.color = "blue";
		drive_homozygotes.color = "red";
		drive_heterozygotes.color = "orange";
		
		// Analyze within the small window around the midpoint
		all_inside_window = all[all.x >= window_lower & all.x <= window_upper];
		Nw = length(all_inside_window);
		drive_homz_inside_window = drive_homozygotes[drive_homozygotes.x >= window_lower  & drive_homozygotes.x <= window_upper];
		drive_hetz_inside_window = drive_heterozygotes[drive_heterozygotes.x >= window_lower & drive_heterozygotes.x <= window_upper];
		n_d_d = length(drive_homz_inside_window);
		n_d_wt = length(drive_hetz_inside_window);
		num_dr = (2*n_d_d) + n_d_wt;		
		drive_freq_in_window = num_dr/(2*Nw);
		sim.setValue("drive_rate", c(sim.getValue("drive_rate"), rate_dr)); // overall
		sim.setValue("d", c(sim.getValue("d"), num_dr));
		sim.setValue("dd", c(sim.getValue("dd"), n_d_d));
		sim.setValue("dwt", c(sim.getValue("dwt"), n_d_wt));	
		sim.setValue("d_rate_in_window", c(sim.getValue("d_rate_in_window"), drive_freq_in_window));		
		d_alleles = sim.getValue("d");
		d_d_count = sim.getValue("dd");
		d_wt_count = sim.getValue("dwt");
		dr_rate_overall = sim.getValue("drive_rate");
		drive_freq_in_window_vector = sim.getValue("d_rate_in_window");
		
		catn("GEN:: " + gen + " N: " + N +" overall_n_drives: "+num_drive_alleles + " overall_drive_rate: " + rate_dr + " drive_alleles_in_window: " + num_dr + " d_d_in_window: " + n_d_d + " d_wt_in_window: " + n_d_wt + " drive_rate_in_window: " + drive_freq_in_window);
		
		// live plotting
		if (LIVEPLOT) {

			// PLOT OF GENOTYPE AND ALLELE COUNTS WITHIN THE WINDOW
			rstr = paste('{',
				'library(tidyverse)',
				'info = tibble(generation = c(' + paste(seqLen(gen-10+1), sep = ", ") + '), drive_homozygotes = c(' + paste(d_d_count, sep=", ") + '), drive_heterozygotes = c(' + paste(d_wt_count, sep = ", ") + '), drive_count = c(' + paste(d_alleles, sep=", ") + '))',
				'p = ggplot(info, aes(x = generation)) + geom_line(aes(y=drive_homozygotes), color = "red") + geom_line(aes(y=drive_heterozygotes), color = "orange") + geom_line(aes(y=drive_count), color = "purple") + ylim(0,' + POPSIZE*MIDPOINT_WINDOW_WIDTH*2*2 +') + xlim(0, 100) + xlab("Generation") + ylab("Count") + ggtitle("Homozygote count (red), heterozygote count (orange),\ndrive allele count (purple). Window = [' + window_lower + ',' + window_upper + ']")',
				'png("' + pngPath + '")',
				'print(p)',
				'dev.off()',
				'}',	
			sep='\n');
			scriptPath = writeTempFile("plot_", ".R", rstr);
			system(RSCRIPT, args=scriptPath);
			
			
			// PLOT OF OVERALL DRIVE RATE
			rstr2 = paste('{',
				'library(tidyverse)',
				'info = tibble(generation = c(' + paste(seqLen(gen-10+1), sep = ", ") + '), drive_rate = c(' + paste(dr_rate_overall, sep=", ") + '))',
				'p = ggplot(info, aes(x = generation, y = drive_rate)) + geom_line(color = "black") + ylim(0, 0.5) + xlim(0, 100) + xlab("Generation") + ylab("Frequency") + ggtitle("Drive allele frequency over entire range")',
				'png("' + pngPathForDriveRate + '")',
				'print(p)',
				'dev.off()',
				'}',	
			sep='\n');
			scriptPath2 = writeTempFile("plot2_", ".R", rstr2);
			system(RSCRIPT, args=scriptPath2);
			
			// PLOT OF THE DRIVE FREQUENCY WITHIN THE WINDOW
			rstr3 = paste('{',
				'library(tidyverse)',
				'info = tibble(generation = c(' + paste(seqLen(gen-10+1), sep = ", ") + '), drive_rate = c(' + paste(drive_freq_in_window_vector, sep=", ") + '))',
				'p = ggplot(info, aes(x = generation, y = drive_rate)) + geom_line(color = "black") + ylim(0, 1.0) + xlim(0, 100) + xlab("Generation") + ylab("Frequency") + ggtitle("Drive allele frequency INSIDE WINDOW - u(t)")',
				'png("' + pngPathForu + '")',
				'print(p)',
				'dev.off()',
				'}',	
			sep='\n');
			scriptPath3 = writeTempFile("plot3_",".R", rstr3);
			system(RSCRIPT, args=scriptPath3);
		
			deleteFile(scriptPath);
			deleteFile(scriptPath2);
			deleteFile(scriptPath3);
		} // end liveplot and output
		
		// end simulation if drive is lost
		if (rate_dr == 0)
			sim.simulationFinished();	
	}  // end if gen >= 10 and !OUTPUT_WINDOW_POINTS
	
	if (OUTPUT_WINDOW_POINTS & gen >= DRIVE_RELEASE_GENERATION){
		drive_homozygotes = all[all.countOfMutationsOfType(m2) == 2*CHROM_LENGTH];
		drive_heterozygotes = all[all.countOfMutationsOfType(m2)==CHROM_LENGTH];
		all.color = "blue";
		drive_homozygotes.color = "red";
		drive_heterozygotes.color = "orange";
		
		// X1: x < -a/2
		all_x1 = all[all.x >= X1-MIDPOINT_WINDOW_WIDTH & all.x <= X1+MIDPOINT_WINDOW_WIDTH];
		Nx1 = length(all_x1); // total in window
		drive_homz_x1 = drive_homozygotes[drive_homozygotes.x >= X1-MIDPOINT_WINDOW_WIDTH  & drive_homozygotes.x <= X1+MIDPOINT_WINDOW_WIDTH];
		drive_hetz_x1 = drive_heterozygotes[drive_heterozygotes.x >= X1-MIDPOINT_WINDOW_WIDTH & drive_heterozygotes.x <= X1+MIDPOINT_WINDOW_WIDTH];
		n_d_d_x1 = length(drive_homz_x1);
		n_d_wt_x1 = length(drive_hetz_x1);
		num_dr_x1 = (2*n_d_d_x1) + n_d_wt_x1;		
		drive_freq_x1 = num_dr_x1/(2*Nx1);
		
		
		// X2: -a/2 <= x <= a/2
		all_x2 = all[all.x >= X2-MIDPOINT_WINDOW_WIDTH & all.x <= X2+MIDPOINT_WINDOW_WIDTH];
		Nx2 = length(all_x2); // total in window
		drive_homz_x2 = drive_homozygotes[drive_homozygotes.x >= X2-MIDPOINT_WINDOW_WIDTH  & drive_homozygotes.x <= X2+MIDPOINT_WINDOW_WIDTH];
		drive_hetz_x2 = drive_heterozygotes[drive_heterozygotes.x >= X2-MIDPOINT_WINDOW_WIDTH & drive_heterozygotes.x <= X2+MIDPOINT_WINDOW_WIDTH];
		n_d_d_x2 = length(drive_homz_x2);
		n_d_wt_x2 = length(drive_hetz_x2);
		num_dr_x2 = (2*n_d_d_x2) + n_d_wt_x2;		
		drive_freq_x2 = num_dr_x2/(2*Nx2);
		
		// X3: x > a/2
		all_x3 = all[all.x >= X3-MIDPOINT_WINDOW_WIDTH & all.x <= X3+MIDPOINT_WINDOW_WIDTH];
		Nx3 = length(all_x3); // total in window
		drive_homz_x3 = drive_homozygotes[drive_homozygotes.x >= X3-MIDPOINT_WINDOW_WIDTH  & drive_homozygotes.x <= X3+MIDPOINT_WINDOW_WIDTH];
		drive_hetz_x3 = drive_heterozygotes[drive_heterozygotes.x >= X3-MIDPOINT_WINDOW_WIDTH & drive_heterozygotes.x <= X3+MIDPOINT_WINDOW_WIDTH];
		n_d_d_x3 = length(drive_homz_x3);
		n_d_wt_x3 = length(drive_hetz_x3);
		num_dr_x3 = (2*n_d_d_x3) + n_d_wt_x3;		
		drive_freq_x3 = num_dr_x3/(2*Nx3);
		
		catn('GENERATION: ' + gen);
		catn(X1 + ' -- number here: ' + Nx1 + ' rate here: ' + drive_freq_x1);
		catn(X2 + ' -- number here: ' + Nx2 + ' rate here: ' + drive_freq_x2);
		catn(X3 + ' -- number here: ' + Nx3 + ' rate here: ' + drive_freq_x3);
		
		
	}
	
	// DISPERSAL
	for (ind in all){
		distance = rexp(1,mu = sigma);
		// if this draw is 1, go right. If it's 0, go left.
		right = rbinom(1, 1, 0.5);
		if (right){
			position = ind.x + distance;
		} else {
			position = ind.x - distance;
		}
		ind.setSpatialPosition(p1.pointPeriodic(position));
	}
	
	if (!PANMICTIC_CHECK){
		i1.evaluate();
	}

}


//Stop the simulation after 100 generations
11 late() { sim.simulationFinished(); }
